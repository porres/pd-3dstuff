#N canvas 150 193 801 795 10;
#X obj 203 397 scope3d~ 30 20 300 empty empty empty empty empty empty 1024 2 empty empty empty empty empty empty empty empty;
#X obj 229 225 v pr;
#X obj 360 226 v r;
#X obj 286 227 v b;
#X floatatom 229 196 5 0 0 0 - - - 0;
#X floatatom 360 198 5 0 0 0 - - - 0;
#X msg 230 171 10;
#X obj 284 168 expr 8./3;
#X msg 201 264 set 1.2 2.3 4.4;
#X floatatom 286 197 7 0 0 0 - - - 0;
#X msg 158 258 stop;
#X msg 128 225 start;
#X floatatom 452 198 5 0 0 0 - - - 0;
#X obj 452 227 v dt;
#X msg 363 170 18;
#X msg 448 171 0.01;
#X obj 181 117 bng 15 250 50 0 empty empty empty 20 8 0 8 #fcfcfc #000000 #000000;
#X text 516 200 <- experiment with these numbers;
#X obj 542 173 line;
#X msg 543 148 0.01 \, 0.04 5000;
#X obj 201 293 fexpr~ $y1+(pr*$y2-pr*$y1)*dt \; $y2 +(-$y1*$y3 + r*$y1-$y2)*dt \; $y3+($y1*$y2 - b*$y3)*dt;
#X obj 113 114 loadbang;
#X text 166 58 This is an example of how fexpr~ could be used for solving differential equations \, in this case the lorenz equations which generate chaotic signals;
#X text 434 290 Note the following shorthands:;
#X text 433 316 $y1 -> $y1[-1] \, $y2 -> $y2[-1] \, .....;
#X text 321 264 the 'set' commands sets the initial previous values;
#X obj 392 368 -~ 1;
#X obj 387 339 *~ 0.05;
#X obj 292 339 *~ 0.05;
#X obj 198 339 *~ 0.05;
#X obj 82 408 out~;
#X connect 4 0 1 0;
#X connect 5 0 2 0;
#X connect 6 0 4 0;
#X connect 7 0 9 0;
#X connect 8 0 20 0;
#X connect 9 0 3 0;
#X connect 10 0 20 0;
#X connect 11 0 20 0;
#X connect 12 0 13 0;
#X connect 14 0 5 0;
#X connect 15 0 12 0;
#X connect 16 0 6 0;
#X connect 16 0 7 0;
#X connect 16 0 14 0;
#X connect 16 0 15 0;
#X connect 16 0 8 0;
#X connect 16 0 11 0;
#X connect 18 0 12 0;
#X connect 19 0 18 0;
#X connect 20 0 29 0;
#X connect 20 1 28 0;
#X connect 20 2 27 0;
#X connect 21 0 16 0;
#X connect 26 0 0 2;
#X connect 27 0 26 0;
#X connect 28 0 0 1;
#X connect 29 0 0 0;
#X connect 29 0 30 0;
